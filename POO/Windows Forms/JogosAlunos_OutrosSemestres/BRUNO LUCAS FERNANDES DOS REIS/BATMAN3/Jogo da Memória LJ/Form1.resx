<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAGAAAAA4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjAAAAhAAA
        AHoAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAA
        AHAAAABwAAAAcAAAACoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAzAAAAdAAAAHQAAAB0AAAAUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGAAAADJAAAAcgAAAMwAAACRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAAP8AAACQAAAA/wAAAP8AAAAYAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcAAAA/wAAAJAAAAD/AAAA/wAAABwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjAAAA0AAAAL8AAACUAAAAnAAA
        AD4AAAAAAAAAAAAAAF4AAACkAAAAkgAAAM8AAADFAAAAKgAAAPAAAAD/AAAAkAAAAP8AAAD/AAAATwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAANwAAAP4AAAD/AAAA/wAA
        AP8AAAD/AAAA/gAAAD4AAAB4AAAA/wAAAP8AAAD/AAAA/wAAAJYAAADMAAAA/wAAAP8AAACQAAAA/wAA
        AP8AAAD7AAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASgAAAOcAAACOAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAmAAAANQAAAD/AAAA/wAAAP8AAADwAAAAlAAAAP8AAAD/AAAA/wAA
        AJAAAAD/AAAA/wAAAP8AAADOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAADvAAAA/wAA
        AIcAAAD3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACoAAAA5AAAAP8AAAD/AAAA/wAAALYAAADWAAAA/wAA
        AP8AAAD/AAAAkAAAAP8AAAD/AAAA/wAAAP8AAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATQAA
        AP8AAAD/AAAA7gAAAJAAAACPAAAAwgAAAP8AAAD/AAAA/wAAAKgAAADkAAAA/wAAAP8AAAD/AAAArgAA
        AOAAAAD/AAAAmAAAAJoAAAB6AAAAiQAAAIcAAAD/AAAA/wAAACQAAAAzAAAAcAAAAB4AAAAAAAAAAAAA
        AAAAAABPAAAA/wAAAP8AAAD/AAAA+wAAAIkAAACLAAAA/wAAAP8AAAD/AAAAqAAAAOQAAAD/AAAA/wAA
        AP8AAADeAAAAsAAAAP4AAABmAAAAqwAAAP8AAADeAAAATQAAAOQAAADxAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEgAAACoAAAAjgAAAI8AAAD4AAAAtAAAAMIAAAD/AAAA/wAAAP8AAACoAAAA5AAA
        AP8AAAD/AAAA/wAAAP8AAAB7AAAA/gAAAP8AAACyAAAAiwAAAJwAAAD6AAAA/wAAAIYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAoAAAA+QAAAGoAAADeAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AKgAAADkAAAA/wAAAP8AAAD/AAAA/wAAANgAAACIAAAA/QAAAP8AAAD/AAAA/wAAAP8AAAC3AAAABgAA
        ACEAAAB7AAAAEQAAAAAAAAAAAAAAAAAAAFQAAAD/AAAA/QAAAKgAAACwAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAqAAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAANEAAAB2AAAAmgAAAMYAAACnAAAAXQAA
        AAAAAAAAAAAAAAAAAAgAAAAOAAAAAAAAAAAAAAAAAAAALQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACoAAAA5AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADiAAAAxAAA
        ALwAAAACAAAASgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKgAAADkAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAXAAAAAAAAAAWAAAAWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAjQAA
        APMAAADZAAAAoQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAqAAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA2AAAAI8AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AMkAAAD/AAAA7gAAAGYAAACxAAAA1gAAAP0AAACJAAAA4wAAAP8AAACoAAAA5AAAAP8AAAD/AAAA7QAA
        AP8AAAD/AAAAvQAAAJgAAAD4AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAsgAAAPAAAAB6AAAAzAAAAJ4AAADZAAAAfAAAAN0AAAD/AAAA/wAAAKgAAADkAAAA/wAA
        AJYAAACPAAAAlAAAAOkAAAD/AAAA7AAAAHwAAAD/AAAAdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA8AAAAmAAAANwAAAD8AAAAhwAAAK4AAAB3AAAA/wAAAP8AAAD/AAAAqAAA
        AOQAAAD/AAAAuAAAAIIAAADIAAAAmgAAAKAAAAD/AAAArwAAAMEAAAAXAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAA4wAAAJgAAADiAAAA/wAAALMAAADMAAAA/wAA
        AP8AAACoAAAA5AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAtwAAAMAAAACnAAAADQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjAAAAigAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAKgAAADkAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfAAAADQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0AAAA/wAA
        AM8AAAD/AAAA/wAAAP8AAAD/AAAApQAAAOEAAAD/AAAA/wAAAP8AAAD/AAAAzwAAAP8AAAA6AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADMAAAD+AAAAiwAAAP0AAAD/AAAA/wAAAP8AAAB4AAAAtAAAAP8AAAD/AAAA/wAAAOAAAACoAAAA6gAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAHUAAADdAAAAggAAAPkAAAD/AAAAuQAAAAoAAAAmAAAA2QAAAP8AAADqAAAAeQAA
        AOkAAABGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAA7AAAACwAAABgAAAAAAAAAAAAAAAAAAAABAAAAHgAA
        AAgAAABEAAAAEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////j////4f///8H////B////wf///8D////A//AwAP/AA
        AB/gAAAfwAAAD8AAAAHAAAAPwAAAH4AAAAOAAABzgAAAH8AAAJ/AAAD/wAAA/8AAAP/AAAD/4AAB//AA
        A//4AAf/+AAH//wAD//+HB////////////8=
</value>
  </data>
</root>